12c12
< void dealer(int old_tot, int old_ace, int cards, double prob, int deck[], double dealer_prob[]);
---
> void dealer(int old_tot, int old_ace, int cards, double prob, int deck[], double dealer_prob[], int h17);
17,18c17,18
<     int ch, i,j,deck[11], pc1, pc2;
<     double dealer_prob[7], ev_stand, ev_hit, ev_double, ev_split;
---
>     int ch, h17, i,j,deck[11], pc1, pc2;
>     double dealer_prob[7], ev_stand, ev_hit, ev_double, ev_split, ev_surrender;
22a23,30
>     ev_surrender = -0.5;
> 
> // Dealer Hit Soft 17 Rule
>     cerr << "H17?\n";
>     cerr << "1. H17\n";
>     cerr << "2. S17\n";
>     cin >> h17;
> 
98c106
<                     max_ev = max2(max2(ev_hit,ev_stand), max2(ev_double, ev_split));
---
>                     max_ev = max2(max2(max2(ev_hit,ev_stand), max2(ev_double, ev_split)),ev_surrender);
105c113
<                     else
---
>                     else if (max_ev==ev_split)
106a115,116
>                     else
>                         basic_strategy[pc1][pc2][upcard] = 5;
125c135
<         char codes[]="XSHDP";
---
>         char codes[]="XSHDPR";
258a269,270
> 
> 
280c292
< void dealer(int old_tot, int old_ace, int cards, double prob, int deck[], double dealer_prob[])
---
> void dealer(int old_tot, int old_ace, int cards, double prob, int deck[], double dealer_prob[], int h17)
288c300
<     for (next_card = 1; next_card <= 10; next_card++)
---
>     if (old_tot == 1) // for dealer ace upcard, hole card cannot be a ten value card
290,307c302,364
<         prob *= (double)deck[next_card] / (double)deck[0];
<         deck[next_card]--;
<         deck[0]--;
<         new_tot = old_tot + next_card;
<         new_ace = old_ace + (next_card == 1 ? 1 : 0);
<         if ((cards==1) && (new_tot==11) && (new_ace == 1)) // blackjack}}
<             dealer_prob[5] += prob;
<         else if (new_tot > 21)
<             dealer_prob[6] += prob;
<         else if (new_tot >= 17)
<             dealer_prob[new_tot -17] += prob;
<         else if ((new_tot >= 7) && (new_tot<=11) && (new_ace > 0))
<             dealer_prob[new_tot - 7] += prob;
<         else
<             dealer(new_tot, new_ace, cards + 1, prob, deck, dealer_prob);
<         deck[0]++;
<         deck[next_card]++;
<         prob /= (double)deck[next_card] / (double)deck[0];
---
>         for (next_card = 1; next_card <= 9; next_card++)
>         {
>             prob *= (double)deck[next_card] / ((double)deck[0]-double(deck[10]));
>             deck[next_card]--;
>             deck[0]--;
>             new_tot = old_tot + next_card;
>             new_ace = old_ace + (next_card == 1 ? 1 : 0);
>             if (new_tot > 21)
>                 dealer_prob[6] += prob;
>             else if (new_tot >= 17)
>                 dealer_prob[new_tot -17] += prob;
>             else if ((new_tot >= 8) && (new_tot<=11) && (new_ace > 0)) // new_tot >= 7 for S17
>                 dealer_prob[new_tot - 7] += prob;
>             else
>                 dealer(new_tot, new_ace, cards + 1, prob, deck, dealer_prob);
>             deck[0]++;
>             deck[next_card]++;
>             prob /= (double)deck[next_card] / ((double)deck[0]-double(deck[10]));
>         }
>     }
>     else if (old_tot == 10) // for dealer ten upcard, hole card cannot be an ace
>     {
>         for (next_card = 2; next_card <= 10; next_card++)
>         {
>             prob *= (double)deck[next_card] / ((double)deck[0]-double(deck[1]));
>             deck[next_card]--;
>             deck[0]--;
>             new_tot = old_tot + next_card;
>             new_ace = old_ace + (next_card == 1 ? 1 : 0);
>             if (new_tot > 21)
>                 dealer_prob[6] += prob;
>             else if (new_tot >= 17)
>                 dealer_prob[new_tot -17] += prob;
>             else if ((new_tot >= 8) && (new_tot<=11) && (new_ace > 0)) // new_tot >= 7 for S17
>                 dealer_prob[new_tot - 7] += prob;
>             else
>                 dealer(new_tot, new_ace, cards + 1, prob, deck, dealer_prob);
>             deck[0]++;
>             deck[next_card]++;
>             prob /= (double)deck[next_card] / ((double)deck[0]-double(deck[1]));
>         }
>     }
>     else
>     {
>         for (next_card = 1; next_card <= 10; next_card++)
>         {
>             prob *= (double)deck[next_card] / (double)deck[0];
>             deck[next_card]--;
>             deck[0]--;
>             new_tot = old_tot + next_card;
>             new_ace = old_ace + (next_card == 1 ? 1 : 0);
>             if (new_tot > 21)
>                 dealer_prob[6] += prob;
>             else if (new_tot >= 17)
>                 dealer_prob[new_tot -17] += prob;
>             else if ((new_tot >= (h17 == 1? 8:7) && (new_tot<=11) && (new_ace > 0)) // new_tot >= 7 for S17
>                 dealer_prob[new_tot - 7] += prob;
>             else
>                 dealer(new_tot, new_ace, cards + 1, prob, deck, dealer_prob);
>             deck[0]++;
>             deck[next_card]++;
>             prob /= (double)deck[next_card] / (double)deck[0];
>         }
